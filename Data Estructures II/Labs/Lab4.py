class Nodo:
    """Clase que representa un nodo en el √°rbol binario de b√∫squeda"""
    def __init__(self, valor):
        self.valor = valor
        self.izquierda = None
        self.derecha = None

class ArbolBinarioBusqueda:
    """Clase que implementa un √°rbol binario de b√∫squeda"""
    
    def __init__(self):
        self.raiz = None
    
    def insertar(self, valor):
        """Inserta un nuevo nodo en el √°rbol manteniendo la propiedad del ABB"""
        if self.raiz is None:
            self.raiz = Nodo(valor)
        else:
            self._insertar_recursivo(self.raiz, valor)
    
    def _insertar_recursivo(self, nodo_actual, valor):
        """M√©todo auxiliar para insertar de forma recursiva"""
        if valor < nodo_actual.valor:
            if nodo_actual.izquierda is None:
                nodo_actual.izquierda = Nodo(valor)
            else:
                self._insertar_recursivo(nodo_actual.izquierda, valor)
        elif valor > nodo_actual.valor:
            if nodo_actual.derecha is None:
                nodo_actual.derecha = Nodo(valor)
            else:
                self._insertar_recursivo(nodo_actual.derecha, valor)
        # Si valor == nodo_actual.valor, no se inserta (no duplicados)
    
    def buscar(self, valor):
        """Busca un valor en el √°rbol y retorna True si existe, False en caso contrario"""
        return self._buscar_recursivo(self.raiz, valor)
    
    def _buscar_recursivo(self, nodo_actual, valor):
        """M√©todo auxiliar para buscar de forma recursiva"""
        if nodo_actual is None:
            return False
        
        if valor == nodo_actual.valor:
            return True
        elif valor < nodo_actual.valor:
            return self._buscar_recursivo(nodo_actual.izquierda, valor)
        else:
            return self._buscar_recursivo(nodo_actual.derecha, valor)
    
    def eliminar(self, valor):
        """Elimina un nodo del √°rbol manteniendo la propiedad del ABB"""
        self.raiz = self._eliminar_recursivo(self.raiz, valor)
    
    def _eliminar_recursivo(self, nodo_actual, valor):
        """M√©todo auxiliar para eliminar de forma recursiva"""
        if nodo_actual is None:
            return nodo_actual
        
        # Buscar el nodo a eliminar
        if valor < nodo_actual.valor:
            nodo_actual.izquierda = self._eliminar_recursivo(nodo_actual.izquierda, valor)
        elif valor > nodo_actual.valor:
            nodo_actual.derecha = self._eliminar_recursivo(nodo_actual.derecha, valor)
        else:
            # Nodo encontrado, proceder con la eliminaci√≥n
            # Caso 1: Nodo sin hijos (hoja)
            if nodo_actual.izquierda is None and nodo_actual.derecha is None:
                return None
            
            # Caso 2: Nodo con un solo hijo
            elif nodo_actual.izquierda is None:
                return nodo_actual.derecha
            elif nodo_actual.derecha is None:
                return nodo_actual.izquierda
            
            # Caso 3: Nodo con dos hijos
            else:
                # Encontrar el sucesor inorden (menor valor en el sub√°rbol derecho)
                sucesor = self._encontrar_minimo(nodo_actual.derecha)
                # Reemplazar el valor del nodo actual con el valor del sucesor
                nodo_actual.valor = sucesor.valor
                # Eliminar el sucesor
                nodo_actual.derecha = self._eliminar_recursivo(nodo_actual.derecha, sucesor.valor)
        
        return nodo_actual
    
    def _encontrar_minimo(self, nodo):
        """Encuentra el nodo con el valor m√≠nimo en un sub√°rbol"""
        while nodo.izquierda is not None:
            nodo = nodo.izquierda
        return nodo
    
    def imprimir_inorden(self):
        """Imprime los valores del √°rbol usando recorrido inorden"""
        if self.raiz is None:
            print("El √°rbol est√° vac√≠o")
        else:
            valores = []
            self._inorden_recursivo(self.raiz, valores)
            print("Recorrido inorden:", " -> ".join(map(str, valores)))
    
    def _inorden_recursivo(self, nodo_actual, valores):
        """M√©todo auxiliar para recorrido inorden recursivo"""
        if nodo_actual is not None:
            self._inorden_recursivo(nodo_actual.izquierda, valores)
            valores.append(nodo_actual.valor)
            self._inorden_recursivo(nodo_actual.derecha, valores)
    
    def esta_vacio(self):
        """Verifica si el √°rbol est√° vac√≠o"""
        return self.raiz is None
    
    def obtener_altura(self):
        """Obtiene la altura del √°rbol"""
        return self._calcular_altura(self.raiz)
    
    def _calcular_altura(self, nodo):
        """Calcula la altura de un nodo de forma recursiva"""
        if nodo is None:
            return 0
        return 1 + max(self._calcular_altura(nodo.izquierda), self._calcular_altura(nodo.derecha))
    
    def mostrar_diagrama(self):
        """Muestra un diagrama visual del √°rbol en formato jer√°rquico"""
        if self.raiz is None:
            print("üå≥ El √°rbol est√° vac√≠o - no hay nada que mostrar")
            return
        
        print("\n" + "="*60)
        print("üå≥ DIAGRAMA DEL √ÅRBOL BINARIO DE B√öSQUEDA")
        print("="*60)
        
        # Obtener la altura del √°rbol
        altura = self.obtener_altura()
        
        # Crear una matriz m√°s compacta
        ancho = 2 ** altura * 2  # Reducir el ancho
        matriz = [[" " for _ in range(ancho)] for _ in range(altura * 2)]
        
        # Llenar la matriz con los nodos
        self._llenar_matriz_compacta(self.raiz, 0, ancho // 2, matriz, altura)
        
        # Imprimir la matriz
        for fila in matriz:
            print("".join(fila).rstrip())
        
        print("="*60)
    
    def _llenar_matriz_compacta(self, nodo, nivel, posicion, matriz, altura_maxima):
        """Llena la matriz con los nodos del √°rbol de forma compacta"""
        if nodo is None or nivel >= altura_maxima:
            return
        
        # Calcular la posici√≥n en la matriz
        fila = nivel * 2
        columna = posicion
        
        # Asegurar que no excedamos los l√≠mites
        if fila < len(matriz) and 0 <= columna < len(matriz[fila]):
            # Colocar el nodo
            valor_str = str(nodo.valor)
            for i, char in enumerate(valor_str):
                if columna + i < len(matriz[fila]):
                    matriz[fila][columna + i] = char
        
        # Calcular espaciado m√°s compacto para los hijos
        espaciado = max(3, 2 ** (altura_maxima - nivel - 2))
        
        # Llenar sub√°rbol izquierdo
        if nodo.izquierda is not None:
            pos_izq = posicion - espaciado
            # Dibujar l√≠nea de conexi√≥n (solo una diagonal)
            if fila + 1 < len(matriz):
                if pos_izq < len(matriz[fila + 1]) and pos_izq >= 0:
                    matriz[fila + 1][pos_izq] = "/"
            self._llenar_matriz_compacta(nodo.izquierda, nivel + 1, pos_izq, matriz, altura_maxima)
        
        # Llenar sub√°rbol derecho
        if nodo.derecha is not None:
            pos_der = posicion + espaciado
            # Dibujar l√≠nea de conexi√≥n (solo una diagonal)
            if fila + 1 < len(matriz):
                if pos_der < len(matriz[fila + 1]) and pos_der >= 0:
                    matriz[fila + 1][pos_der] = "\\"
            self._llenar_matriz_compacta(nodo.derecha, nivel + 1, pos_der, matriz, altura_maxima)
    
    def mostrar_diagrama_simple(self):
        """Muestra un diagrama simple del √°rbol por niveles"""
        if self.raiz is None:
            print("üå≥ El √°rbol est√° vac√≠o - no hay nada que mostrar")
            return
        
        print("\n" + "="*60)
        print("üå≥ DIAGRAMA SIMPLE DEL √ÅRBOL")
        print("="*60)
        
        # Obtener todos los nodos por niveles
        niveles = self._obtener_niveles()
        
        # Mostrar el √°rbol nivel por nivel
        for i, nivel in enumerate(niveles):
            if nivel:  # Si el nivel no est√° vac√≠o
                print(f"\nNivel {i}: ", end="")
                for j, nodo in enumerate(nivel):
                    if nodo is not None:
                        print(f"[{nodo.valor}]", end="")
                        if j < len(nivel) - 1:
                            print(" - ", end="")
                    else:
                        print("[ ]", end="")
                        if j < len(nivel) - 1:
                            print(" - ", end="")
                print()
        
        print("="*60)
    
    def _obtener_niveles(self):
        """Obtiene todos los nodos organizados por niveles"""
        if self.raiz is None:
            return []
        
        niveles = []
        cola = [self.raiz]
        
        while cola:
            nivel_actual = []
            tamano_nivel = len(cola)
            
            for _ in range(tamano_nivel):
                nodo = cola.pop(0)
                nivel_actual.append(nodo)
                
                if nodo is not None:
                    cola.append(nodo.izquierda)
                    cola.append(nodo.derecha)
                else:
                    cola.append(None)
                    cola.append(None)
            
            # Solo agregar el nivel si tiene al menos un nodo no nulo
            if any(nodo is not None for nodo in nivel_actual):
                niveles.append(nivel_actual)
            else:
                break
        
        return niveles
    
    def _mostrar_conexiones(self, nodo, prefijo):
        """Muestra las conexiones del √°rbol de forma recursiva"""
        if nodo is None:
            return
        
        print(f"{prefijo}‚îî‚îÄ‚îÄ {nodo.valor}")
        
        if nodo.izquierda is not None or nodo.derecha is not None:
            if nodo.izquierda is not None:
                print(f"{prefijo}    ‚îú‚îÄ‚îÄ Izq: {nodo.izquierda.valor}")
                self._mostrar_conexiones(nodo.izquierda, prefijo + "    ‚îÇ   ")
            else:
                print(f"{prefijo}    ‚îú‚îÄ‚îÄ Izq: (vac√≠o)")
            
            if nodo.derecha is not None:
                print(f"{prefijo}    ‚îî‚îÄ‚îÄ Der: {nodo.derecha.valor}")
                self._mostrar_conexiones(nodo.derecha, prefijo + "        ")
            else:
                print(f"{prefijo}    ‚îî‚îÄ‚îÄ Der: (vac√≠o)")
    
    def mostrar_estadisticas(self):
        """Muestra estad√≠sticas del √°rbol"""
        if self.raiz is None:
            print("üìä El √°rbol est√° vac√≠o - no hay estad√≠sticas que mostrar")
            return
        
        altura = self.obtener_altura()
        total_nodos = self._contar_nodos(self.raiz)
        
        print("\nüìä ESTAD√çSTICAS DEL √ÅRBOL:")
        print(f"   ‚Ä¢ Altura: {altura}")
        print(f"   ‚Ä¢ Total de nodos: {total_nodos}")
        print(f"   ‚Ä¢ Nivel m√°ximo: {altura - 1}")
    
    def _contar_nodos(self, nodo):
        """Cuenta el n√∫mero total de nodos en el √°rbol"""
        if nodo is None:
            return 0
        return 1 + self._contar_nodos(nodo.izquierda) + self._contar_nodos(nodo.derecha)

def mostrar_menu():
    """Muestra el men√∫ de opciones"""
    print("\n" + "="*60)
    print("    SISTEMA DE GESTI√ìN DE √ÅRBOL BINARIO DE B√öSQUEDA")
    print("="*60)
    print("1. Insertar un nodo")
    print("2. Buscar un nodo")
    print("3. Eliminar un nodo")
    print("4. Imprimir el √°rbol (recorrido inorden)")
    print("5. Mostrar diagrama visual del √°rbol")
    print("6. Mostrar diagrama simple del √°rbol")
    print("7. Mostrar estad√≠sticas del √°rbol")
    print("8. Salir")
    print("="*60)

def main():
    """Funci√≥n principal que ejecuta el programa"""
    arbol = ArbolBinarioBusqueda()
    
    print("¬°Bienvenido al Sistema de Gesti√≥n de √Årbol Binario de B√∫squeda!")
    print("El √°rbol ha sido inicializado y est√° listo para recibir nodos.")
    
    while True:
        mostrar_menu()
        
        try:
            opcion = input("\nSeleccione una opci√≥n (1-8): ").strip()
            
            if opcion == "1":
                # Insertar un nodo
                try:
                    valor = int(input("Ingrese el valor a insertar: "))
                    arbol.insertar(valor)
                    print(f"‚úì Valor {valor} insertado exitosamente en el √°rbol.")
                except ValueError:
                    print("‚úó Error: Por favor ingrese un n√∫mero entero v√°lido.")
            
            elif opcion == "2":
                # Buscar un nodo
                if arbol.esta_vacio():
                    print("‚úó El √°rbol est√° vac√≠o. No hay valores para buscar.")
                else:
                    try:
                        valor = int(input("Ingrese el valor a buscar: "))
                        if arbol.buscar(valor):
                            print(f"‚úì El valor {valor} S√ç est√° presente en el √°rbol.")
                        else:
                            print(f"‚úó El valor {valor} NO est√° presente en el √°rbol.")
                    except ValueError:
                        print("‚úó Error: Por favor ingrese un n√∫mero entero v√°lido.")
            
            elif opcion == "3":
                # Eliminar un nodo
                if arbol.esta_vacio():
                    print("‚úó El √°rbol est√° vac√≠o. No hay valores para eliminar.")
                else:
                    try:
                        valor = int(input("Ingrese el valor a eliminar: "))
                        if arbol.buscar(valor):
                            arbol.eliminar(valor)
                            print(f"‚úì Valor {valor} eliminado exitosamente del √°rbol.")
                        else:
                            print(f"‚úó El valor {valor} no est√° presente en el √°rbol.")
                    except ValueError:
                        print("‚úó Error: Por favor ingrese un n√∫mero entero v√°lido.")
            
            elif opcion == "4":
                # Imprimir el √°rbol
                arbol.imprimir_inorden()
            
            elif opcion == "5":
                # Mostrar diagrama visual del √°rbol
                arbol.mostrar_diagrama()
            
            elif opcion == "6":
                # Mostrar diagrama simple del √°rbol
                arbol.mostrar_diagrama_simple()
            
            elif opcion == "7":
                # Mostrar estad√≠sticas del √°rbol
                arbol.mostrar_estadisticas()
            
            elif opcion == "8":
                # Salir
                print("\n¬°Gracias por usar el Sistema de Gesti√≥n de √Årbol Binario de B√∫squeda!")
                print("¬°Hasta luego!")
                break
            
            else:
                print("‚úó Opci√≥n inv√°lida. Por favor seleccione una opci√≥n del 1 al 8.")
        
        except KeyboardInterrupt:
            print("\n\n¬°Programa interrumpido por el usuario!")
            print("¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚úó Error inesperado: {e}")

if __name__ == "__main__":
    main()
